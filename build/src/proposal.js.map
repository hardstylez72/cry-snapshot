{"version":3,"file":"proposal.js","sourceRoot":"","sources":["../../src/proposal.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,MAAM,YAAY,CAAC;AAI/B,iBAAiB;AACjB,+FAA+F;AAC/F,EAAE;AACF,+DAA+D;AAC/D,iCAAiC;AACjC,qBAAqB;AACrB,OAAO;AACP,MAAM,CAAC,MAAM,WAAW,GAAG,CAAO,EAAU,EAAqB,EAAE;IAC/D,IAAI;QAEJ,MAAM,CAAC,GAAG,MAAM,KAAK,CAAC,kCAAkC,EAAE;YACtD,SAAS,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,iBAAiB,EAAE,uDAAuD;gBAC1E,cAAc,EAAE,kBAAkB;gBAClC,WAAW,EAAE,+EAA+E;gBAC5F,kBAAkB,EAAE,IAAI;gBACxB,oBAAoB,EAAE,WAAW;aACpC;YACD,MAAM,EAAE,2DAA2D,EAAE,4kBAA4kB;YACjpB,QAAQ,EAAE,MAAM;SACnB,CAAC,CAAC;QACH,MAAM,CAAC,GAAQ,MAAM,CAAC,CAAC,IAAI,EAAE,CAAA;QAC7B,OAAO,CAAC,CAAC,IAAI,CAAC,QAAoB,CAAA;KAEjC;IAAC,OAAO,CAAC,EAAE;QACR,MAAM,IAAI,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;KACrD;AACL,CAAC,CAAA,CAAA;AACD,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAO,KAAa,EAAqB,EAAE;IAEzE,IAAI;QACA,MAAM,CAAC,GAAG,MAAM,KAAK,CAAC,kCAAkC,EAAE;YACtD,SAAS,EAAE;gBACP,QAAQ,EAAE,KAAK;gBACf,iBAAiB,EAAE,uDAAuD;gBAC1E,cAAc,EAAE,kBAAkB;gBAClC,WAAW,EAAE,+EAA+E;gBAC5F,kBAAkB,EAAE,IAAI;gBACxB,oBAAoB,EAAE,WAAW;aACpC;YACD,MAAM,EAAE,sGAAsG,KAAK,uXAAuX;YAC1e,QAAQ,EAAE,MAAM;SACnB,CAAC,CAAC;QAEH,MAAM,CAAC,GAAQ,MAAM,CAAC,CAAC,IAAI,EAAE,CAAA;QAC7B,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAa,CAAA;KACrD;IAAC,OAAO,CAAC,EAAE;QACR,MAAM,IAAI,KAAK,CAAC,oBAAoB,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;KAC5D;AAEL,CAAC,CAAA,CAAA","sourcesContent":["import fetch from \"node-fetch\";\nimport * as process from \"process\";\n\n\n// (async () => {\n//     console.log(\"process.env.GLOBAL_AGENT_HTTP_PROXY\",  process.env.GLOBAL_AGENT_HTTP_PROXY)\n//\n//     const res = await fetch(\"https://api4.my-ip.io/ip.json\")\n//     const f = await res.json()\n//     console.log(f)\n// })()\nexport const getProposal = async (id: string): Promise<Proposal> => {\n    try {\n\n    const r = await fetch(\"https://hub.snapshot.org/graphql\", {\n        \"headers\": {\n            \"accept\": \"*/*\",\n            \"accept-language\": \"ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7,ka;q=0.6,id;q=0.5\",\n            \"content-type\": \"application/json\",\n            \"sec-ch-ua\": \"\\\"Google Chrome\\\";v=\\\"113\\\", \\\"Chromium\\\";v=\\\"113\\\", \\\"Not-A.Brand\\\";v=\\\"24\\\"\",\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": \"\\\"macOS\\\"\",\n        },\n        \"body\": `{\\\"operationName\\\":\\\"Proposal\\\",\\\"variables\\\":{\\\"id\\\":\\\"${id}\\\"},\\\"query\\\":\\\"query Proposal($id: String!) {\\\\n  proposal(id: $id) {\\\\n    id\\\\n    ipfs\\\\n    title\\\\n    body\\\\n    discussion\\\\n    choices\\\\n    start\\\\n    end\\\\n    snapshot\\\\n    state\\\\n    author\\\\n    created\\\\n    plugins\\\\n    network\\\\n    type\\\\n    quorum\\\\n    symbol\\\\n    privacy\\\\n    validation {\\\\n      name\\\\n      params\\\\n    }\\\\n    strategies {\\\\n      name\\\\n      network\\\\n      params\\\\n    }\\\\n    space {\\\\n      id\\\\n      name\\\\n    }\\\\n    scores_state\\\\n    scores\\\\n    scores_by_strategy\\\\n    scores_total\\\\n    votes\\\\n    flagged\\\\n  }\\\\n}\\\"}`,\n        \"method\": \"POST\"\n    });\n    const b: any = await r.json()\n    return b.data.proposal as Proposal\n\n    } catch (e) {\n        throw new Error('getProposal' + JSON.stringify(e))\n    }\n}\nexport const getActiveProposals = async (space: string): Promise<string[]> => {\n\n    try {\n        const r = await fetch(\"https://hub.snapshot.org/graphql\", {\n            \"headers\": {\n                \"accept\": \"*/*\",\n                \"accept-language\": \"ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7,ka;q=0.6,id;q=0.5\",\n                \"content-type\": \"application/json\",\n                \"sec-ch-ua\": \"\\\"Google Chrome\\\";v=\\\"113\\\", \\\"Chromium\\\";v=\\\"113\\\", \\\"Not-A.Brand\\\";v=\\\"24\\\"\",\n                \"sec-ch-ua-mobile\": \"?0\",\n                \"sec-ch-ua-platform\": \"\\\"macOS\\\"\",\n            },\n            \"body\": `{\\\"operationName\\\":\\\"Proposals\\\",\\\"variables\\\":{\\\"first\\\":100,\\\"state\\\":\\\"active\\\",\\\"space_in\\\":[\\\"${space}\\\"],\\\"start_gte\\\":1684056849},\\\"query\\\":\\\"query Proposals($first: Int!, $state: String!, $space_in: [String], $start_gte: Int) {\\\\n  proposals(\\\\n    first: $first\\\\n    where: {state: $state, space_in: $space_in, start_gte: $start_gte}\\\\n  ) {\\\\n    id\\\\n    title\\\\n    start\\\\n    end\\\\n    state\\\\n    space {\\\\n      id\\\\n      name\\\\n      avatar\\\\n    }\\\\n  }\\\\n}\\\"}`,\n            \"method\": \"POST\"\n        });\n\n        const b: any = await r.json()\n        return b.data.proposals.map(p => p.id) as string[]\n    } catch (e) {\n        throw new Error('getActiveProposals' + JSON.stringify(e))\n    }\n\n}\n\nexport interface Proposal {\n    id: string\n    choices: any[]\n\n    type: string\n    error?: Error\n}\n\n\n\n"]}